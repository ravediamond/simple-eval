import io
import os
import json
from datetime import datetime
from typing import List, Dict, Any
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
from reportlab.graphics.shapes import Drawing, Rect
from reportlab.graphics.charts.barcharts import VerticalBarChart
from reportlab.graphics.charts.piecharts import Pie
from reportlab.graphics import renderPDF

class EvaluationPDFGenerator:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.setup_custom_styles()
        self.setup_translations()
    
    def setup_translations(self):
        """Load translation files from the translations directory"""
        self.translations = {}
        
        # Get the path to the translations directory
        current_dir = os.path.dirname(__file__)
        translation_dir = os.path.join(current_dir, '..', 'translations')
        
        for lang_code in ['en', 'fr']:
            file_path = os.path.join(translation_dir, f'{lang_code}.json')
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    translations = json.load(f)
                    # Add PDF-specific translations with emojis for section headers
                    translations.update({
                        'executive_summary': f"ðŸ“Š {translations.get('executive_summary', 'Executive Summary')}",
                        'key_insights': f"ðŸ’¡ {translations.get('key_insights', 'Key Insights')}",
                        'recommendations': f"ðŸŽ¯ {translations.get('recommendations', 'Recommendations')}",
                        'detailed_results': f"ðŸ“‹ {translations.get('detailed_results', 'Detailed Results')}",
                        'score_distribution': f"ðŸ“ˆ {translations.get('score_distribution', 'Score Distribution')}",
                        'ai_powered_analysis': f"ðŸ¤– {translations.get('ai_powered_analysis', 'AI-Powered Analysis')}",
                        # Add PDF-specific translations
                        'file': f"{translations.get('file', 'File')}:",
                        'generated': f"{translations.get('generated', 'Generated')}:",
                        'report_type': f"{translations.get('report_type', 'Report Type')}:",
                        'more_questions': 'more questions' if lang_code == 'en' else 'questions supplÃ©mentaires',
                        'see_full_results': 'See full results online' if lang_code == 'en' else 'Voir les rÃ©sultats complets en ligne',
                        'generated_by': 'Generated by EvalNow' if lang_code == 'en' else 'GÃ©nÃ©rÃ© par EvalNow',
                        'app_description': 'EvalNow is the fastest way to evaluate your AI responses. Upload your data, get AI-powered insights instantly!' if lang_code == 'en' else 'EvalNow est le moyen le plus rapide d\'Ã©valuer vos rÃ©ponses IA. TÃ©lÃ©chargez vos donnÃ©es, obtenez des insights assistÃ©s par IA instantanÃ©ment!',
                        'try_yourself': 'Try it yourself:' if lang_code == 'en' else 'Essayez par vous-mÃªme:',
                        'no_signup': 'No signup required â€¢ Privacy-first â€¢ AI-powered analysis' if lang_code == 'en' else 'Aucune inscription requise â€¢ ConfidentialitÃ© d\'abord â€¢ Analyse assistÃ©e par IA',
                        'perfect_for': 'Perfect for developers, researchers, and AI teams who need quick, reliable evaluation results.' if lang_code == 'en' else 'Parfait pour les dÃ©veloppeurs, chercheurs et Ã©quipes IA qui ont besoin de rÃ©sultats d\'Ã©valuation rapides et fiables.'
                    })
                    self.translations[lang_code] = translations
            except FileNotFoundError:
                print(f"Warning: Translation file {file_path} not found for PDF generator")
                self.translations[lang_code] = {}
            except json.JSONDecodeError as e:
                print(f"Error loading translation file {file_path}: {e}")
                self.translations[lang_code] = {}
    
    def t(self, key: str, language: str = 'en') -> str:
        """Get translated text for a key"""
        return self.translations.get(language, {}).get(key, self.translations['en'].get(key, key))
        
    def clean_markdown_text(self, text: str) -> str:
        """Clean markdown formatting from text for PDF rendering"""
        import re
        # Remove **bold** formatting and keep the text
        text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)
        # Remove other common markdown patterns
        text = re.sub(r'\*(.*?)\*', r'\1', text)  # *italic*
        text = text.strip()
        return text
    
    def setup_custom_styles(self):
        # Custom styles for the PDF
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            textColor=colors.HexColor('#1a1a1a'),
            alignment=TA_CENTER,
            spaceAfter=30
        ))
        
        self.styles.add(ParagraphStyle(
            name='SubTitle',
            parent=self.styles['Heading2'],
            fontSize=16,
            textColor=colors.HexColor('#666666'),
            alignment=TA_CENTER,
            spaceAfter=20
        ))
        
        self.styles.add(ParagraphStyle(
            name='SectionHeader',
            parent=self.styles['Heading2'],
            fontSize=18,
            textColor=colors.HexColor('#ff6b35'),
            spaceBefore=20,
            spaceAfter=12
        ))
        
        self.styles.add(ParagraphStyle(
            name='InsightText',
            parent=self.styles['Normal'],
            fontSize=11,
            textColor=colors.HexColor('#333333'),
            leftIndent=20,
            spaceBefore=6,
            spaceAfter=6
        ))
        
        self.styles.add(ParagraphStyle(
            name='AppPromo',
            parent=self.styles['Normal'],
            fontSize=10,
            textColor=colors.HexColor('#666666'),
            alignment=TA_CENTER,
            borderColor=colors.HexColor('#ff6b35'),
            borderWidth=1,
            borderPadding=10,
            backColor=colors.HexColor('#fff5f2')
        ))
        
    def create_score_chart(self, distribution: Dict[str, int]):
        """Create a bar chart for score distribution"""
        drawing = Drawing(400, 200)
        
        chart = VerticalBarChart()
        chart.x = 50
        chart.y = 50
        chart.height = 120
        chart.width = 300
        
        chart.data = [[
            distribution.get('excellent', 0),
            distribution.get('good', 0),
            distribution.get('needs_improvement', 0),
            distribution.get('poor', 0)
        ]]
        
        chart.categoryAxis.categoryNames = ['Excellent\n(90%+)', 'Good\n(70-89%)', 'Needs Work\n(50-69%)', 'Poor\n(<50%)']
        chart.valueAxis.valueMin = 0
        chart.valueAxis.valueMax = max(distribution.values()) + 1 if distribution.values() else 5
        
        chart.bars[0].fillColor = colors.HexColor('#28a745')
        chart.bars[1].fillColor = colors.HexColor('#17a2b8')
        chart.bars[2].fillColor = colors.HexColor('#ffc107')
        chart.bars[3].fillColor = colors.HexColor('#dc3545')
        
        drawing.add(chart)
        return drawing
    
    def generate_pdf(self, results: List[Any], insights: Dict[str, Any], filename: str, evaluation_time: str, language: str = 'en') -> io.BytesIO:
        """Generate a comprehensive PDF report"""
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(
            buffer, 
            pagesize=A4, 
            rightMargin=72, 
            leftMargin=72, 
            topMargin=72, 
            bottomMargin=18,
            title="EvalNow - AI Response Evaluation Report",
            author="EvalNow",
            subject=f"AI Evaluation Report for {filename}",
            creator="EvalNow - evalnow.xyz"
        )
        
        story = []
        
        # Header with App Branding
        story.append(Paragraph(f"ðŸš€ {self.t('title', language)}", self.styles['CustomTitle']))
        story.append(Paragraph(self.t('subtitle', language), self.styles['SubTitle']))
        story.append(Spacer(1, 20))
        
        # Report Info
        report_info = [
            [self.t('file', language), filename],
            [self.t('generated', language), evaluation_time + " UTC"],
            [self.t('total_questions', language), str(insights['total_questions'])],
            [self.t('report_type', language), self.t('comprehensive_analysis', language)]
        ]
        
        info_table = Table(report_info, colWidths=[2*inch, 3*inch])
        info_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('TEXTCOLOR', (0, 0), (0, -1), colors.HexColor('#666666')),
            ('TEXTCOLOR', (1, 0), (1, -1), colors.HexColor('#333333')),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ]))
        story.append(info_table)
        story.append(Spacer(1, 30))
        
        # Executive Summary
        story.append(Paragraph(self.t('executive_summary', language), self.styles['SectionHeader']))
        
        # Key Metrics Table
        avg_score = f"{insights['average_score'] * 100:.1f}%"
        pass_rate = f"{insights['pass_rate'] * 100:.1f}%"
        
        # Translate assessment values
        good_assessment = self.t('good', language)
        needs_improvement_assessment = self.t('needs_improvement', language)
        excellent_assessment = self.t('excellent', language)
        poor_assessment = self.t('poor', language)
        comprehensive_assessment = self.t('comprehensive_sample', language)
        limited_assessment = self.t('limited_sample', language)
        
        metrics_data = [
            [self.t('metric', language), self.t('value', language), self.t('assessment', language)],
            [self.t('average_score', language), avg_score, good_assessment if insights['average_score'] >= 0.7 else needs_improvement_assessment],
            [self.t('pass_rate', language), pass_rate, excellent_assessment if insights['pass_rate'] >= 0.8 else good_assessment if insights['pass_rate'] >= 0.6 else poor_assessment],
            [self.t('total_questions', language), str(insights['total_questions']), comprehensive_assessment if insights['total_questions'] >= 10 else limited_assessment]
        ]
        
        metrics_table = Table(metrics_data, colWidths=[2*inch, 1.5*inch, 2*inch])
        metrics_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#ff6b35')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#dddddd')),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f8f9fa')])
        ]))
        story.append(metrics_table)
        story.append(Spacer(1, 20))
        
        # Score Distribution Chart
        if 'distribution' in insights:
            story.append(Paragraph(self.t('score_distribution', language), self.styles['SectionHeader']))
            chart = self.create_score_chart(insights['distribution'])
            story.append(chart)
            story.append(Spacer(1, 20))
        
        # AI Analysis
        if 'ai_analysis' in insights:
            ai_analysis = insights['ai_analysis']
            
            story.append(Paragraph(self.t('ai_powered_analysis', language), self.styles['SectionHeader']))
            story.append(Paragraph(ai_analysis.get('summary', ''), self.styles['Normal']))
            story.append(Spacer(1, 15))
            
            # Key Insights
            story.append(Paragraph(self.t('key_insights', language), self.styles['Heading3']))
            for insight in ai_analysis.get('key_insights', []):
                cleaned_insight = self.clean_markdown_text(insight)
                story.append(Paragraph(f"â€¢ {cleaned_insight}", self.styles['InsightText']))
            story.append(Spacer(1, 15))
            
            # Recommendations
            story.append(Paragraph(self.t('recommendations', language), self.styles['Heading3']))
            for recommendation in ai_analysis.get('recommendations', []):
                cleaned_recommendation = self.clean_markdown_text(recommendation)
                story.append(Paragraph(f"â€¢ {cleaned_recommendation}", self.styles['InsightText']))
            story.append(Spacer(1, 20))
        
        # Detailed Results Table (Top 10 or all if <= 10)
        story.append(Paragraph(self.t('detailed_results', language), self.styles['SectionHeader']))
        
        # Limit to top 10 for PDF readability
        display_results = results[:10] if len(results) > 10 else results
        
        results_data = [["#", self.t('question', language), self.t('score', language), self.t('assessment', language)]]
        
        for i, result in enumerate(display_results, 1):
            score_percent = int(result.score * 100)
            if score_percent >= 90:
                assessment = self.t('excellent', language)
            elif score_percent >= 70:
                assessment = self.t('good', language)
            elif score_percent >= 50:
                assessment = self.t('needs_improvement', language)
            else:
                assessment = self.t('poor', language)
            
            # Truncate long questions for PDF
            question = result.question[:80] + "..." if len(result.question) > 80 else result.question
            
            results_data.append([
                str(i),
                question,
                f"{score_percent}%",
                assessment
            ])
        
        if len(results) > 10:
            results_data.append(["...", f"+ {len(results) - 10} {self.t('more_questions', language)}", "", self.t('see_full_results', language)])
        
        results_table = Table(results_data, colWidths=[0.5*inch, 3.5*inch, 0.8*inch, 1.2*inch])
        results_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f8f9fa')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#333333')),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('ALIGN', (0, 0), (0, -1), 'CENTER'),  # Question numbers centered
            ('ALIGN', (2, 0), (2, -1), 'CENTER'),  # Scores centered
            ('ALIGN', (3, 0), (3, -1), 'CENTER'),  # Assessment centered
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.HexColor('#dddddd')),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#fafafa')])
        ]))
        story.append(results_table)
        story.append(Spacer(1, 30))
        
        # App Promotion Footer
        story.append(Paragraph(
            f"""
            <b>ðŸš€ {self.t('generated_by', language)}</b><br/>
            {self.t('app_description', language)}<br/>
            <b>{self.t('try_yourself', language)}</b> https://evalnow.xyz | {self.t('no_signup', language)}<br/>
            <i>{self.t('perfect_for', language)}</i>
            """,
            self.styles['AppPromo']
        ))
        
        # Build PDF
        doc.build(story)
        buffer.seek(0)
        return buffer